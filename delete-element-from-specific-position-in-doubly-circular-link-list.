# -Implement-a-program-to-delete-element-from-specific-position-in-doubly-circular-link-list.
#include <iostream>
using namespace std;

// Node structure for Doubly Circular Linked List
struct Node {
    int data;
    Node* next;
    Node* prev;

    // Constructor to create a new node
    Node(int val) {
        data = val;
        next = prev = nullptr;
    }
};

// Class for Doubly Circular Linked List
class DoublyCircularLinkedList {
private:
    Node* head;

public:
    // Constructor to initialize the list
    DoublyCircularLinkedList() {
        head = nullptr;
    }

    // Function to insert a node at the end (for testing purposes)
    void insertAtEnd(int value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {
            head = newNode;
            head->next = head;
            head->prev = head;
        } else {
            Node* temp = head;
            while (temp->next != head) {
                temp = temp->next;
            }
            temp->next = newNode;
            newNode->prev = temp;
            newNode->next = head;
            head->prev = newNode;
        }
        cout << value << " inserted at the end." << endl;
    }

    // Function to delete a node at a specific position
    void deleteAtPosition(int position) {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }

        Node* temp = head;
        int length = 1;
        // Find the length of the list
        while (temp->next != head) {
            temp = temp->next;
            length++;
        }

        if (position <= 0 || position > length) {
            cout << "Invalid position!" << endl;
            return;
        }

        temp = head;
        if (position == 1) { // Delete the first node (head)
            if (head->next == head) {  // Only one node in the list
                delete head;
                head = nullptr;
            } else {
                Node* last = head->prev;
                head = head->next;
                last->next = head;
                head->prev = last;
                delete temp;
            }
            cout << "Node deleted at position " << position << endl;
            return;
        }

        // Traverse to the node at the given position
        for (int i = 1; i < position; i++) {
            temp = temp->next;
        }

        // Remove the node from the list
        temp->prev->next = temp->next;
        temp->next->prev = temp->prev;
        delete temp;

        cout << "Node deleted at position " << position << endl;
    }

    // Function to display the list
    void display() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }

        Node* temp = head;
        cout << "List: ";
        do {
            cout << temp->data << " ";
            temp = temp->next;
        } while (temp != head);
        cout << endl;
    }
};

int main() {
    DoublyCircularLinkedList list;
    int choice, value, position;

    // Adding some initial values for testing
    list.insertAtEnd(10);
    list.insertAtEnd(20);
    list.insertAtEnd(30);
    list.insertAtEnd(40);
    list.insertAtEnd(50);

    do {
        cout << "\nMenu:\n";
        cout << "1. Display List\n";
        cout << "2. Delete Node at Position\n";
        cout << "3. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                list.display();
                break;
            case 2:
                cout << "Enter position to delete: ";
                cin >> position;
                list.deleteAtPosition(position);
                break;
            case 3:
                cout << "Exiting program." << endl;
                break;
            default:
                cout << "Invalid choice! Please try again." << endl;
        }
    } while (choice != 3);

    return 0;
}

